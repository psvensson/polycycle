// Generated by CoffeeScript 1.9.3
(function() {
  var FooThing, SampleGame, SamplePlayer, SuperModel, all, defer, uuid,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  SuperModel = require('spincycle').SuperModel;

  defer = require('node-promise').defer;

  all = require('node-promise').allOrNone;

  uuid = require('node-uuid');

  SamplePlayer = require('./SamplePlayer');

  FooThing = require('./FooThing');

  SampleGame = (function(superClass) {
    extend(SampleGame, superClass);

    SampleGame.type = 'SampleGame';

    SampleGame.model = [
      {
        name: 'players',
        "public": true,
        array: true,
        type: 'SamplePlayer',
        ids: 'players'
      }, {
        name: 'name',
        "public": true,
        value: 'name',
        "default": 'game_' + uuid.v4()
      }
    ];

    function SampleGame(record) {
      this.record = record;
      this.createPlayers = bind(this.createPlayers, this);
      this.postCreate = bind(this.postCreate, this);
      return SampleGame.__super__.constructor.apply(this, arguments);
    }

    SampleGame.prototype.postCreate = function(q) {
      console.log('players.length  == ' + this.players.length);
      if (this.players.length === 0) {
        return this.createPlayers().then((function(_this) {
          return function() {
            return q.resolve(_this);
          };
        })(this));
      } else {
        return q.resolve(this);
      }
    };

    SampleGame.prototype.createPlayers = function() {
      var q;
      console.log('creating sample players');
      q = defer();
      this.players = [];
      new SamplePlayer({
        name: 'player 1',
        createdBy: 'SYSTEM',
        createdAt: Date.now()
      }).then((function(_this) {
        return function(p1) {
          return new SamplePlayer({
            name: 'player 2',
            createdBy: 'SYSTEM',
            createdAt: Date.now()
          }).then(function(p2) {
            return new FooThing({
              name: 'ft1',
              createdBy: 'SYSTEM',
              createdAt: Date.now()
            }).then(function(ft1) {
              return new FooThing({
                name: 'ft2',
                createdBy: 'SYSTEM',
                createdAt: Date.now()
              }).then(function(ft2) {
                console.log('adding player ' + p1.name);
                p1.foohash[ft1.name] = ft1;
                p1.foohash[ft2.name] = ft2;
                ft1.serialize();
                ft2.serialize();
                _this.players.push(p1);
                console.log('adding player ' + p2.name);
                _this.players.push(p2);
                p1.serialize();
                p2.serialize();
                _this.serialize();
                return q.resolve();
              });
            });
          });
        };
      })(this));
      return q;
    };

    return SampleGame;

  })(SuperModel);

  module.exports = SampleGame;

}).call(this);

//# sourceMappingURL=SampleGame.js.map
